services:
  db:
    image: postgres:15-alpine
    container_name: django_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-django_db}
      POSTGRES_USER: ${POSTGRES_USER:-django_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-django_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"  # Using 5433 to avoid conflict with local PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-django_user} -d ${POSTGRES_DB:-django_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - django_network

  redis:
    image: redis:7-alpine
    container_name: django_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - django_network

  web:
    build: .
    container_name: django_web
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8001:8000"  # Using 8001 to avoid conflict with FastAPI service
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - POSTGRES_DB=${POSTGRES_DB:-django_db}
      - POSTGRES_USER=${POSTGRES_USER:-django_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-django_password}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - django_network


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  django_network:
    driver: bridge
