services:
  redis:
    image: redis:7-alpine
    container_name: monolith_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [apps-net]

  web:
    build: .
    container_name: monolith_web
    restart: unless-stopped
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./secrets/jwtRS256.key:/run/secrets/jwtRS256.key:ro
      - ./secrets/jwtRS256.key.pub:/run/secrets/jwtRS256.key.pub:ro
    ports:
      - "8001:8000"  # Using 8001 to avoid conflict with FastAPI service
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}

      - POSTGRES_DB=${POSTGRES_DB:-django_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_postgres_password}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432

      - COLLECTSTATIC=1
      - AUTO_MAKEMIGRATIONS=0
      - MIGRATE_DATABASES=default

      - REDIS_URL=redis://redis:6379/0
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - JWT_PRIVATE_KEY_PATH=${JWT_PRIVATE_KEY_PATH}
      - JWT_PUBLIC_KEY_PATH=${JWT_PUBLIC_KEY_PATH}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
    depends_on:
      redis:
        condition: service_healthy

    networks: [apps-net]


volumes:
  redis_data:
  static_volume:
  media_volume:

networks:
  apps-net:
    external: true
